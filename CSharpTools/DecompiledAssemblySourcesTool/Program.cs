// See https://aka.ms/new-console-template for more information


using DecompiledAssemblySourcesTool;
using System.CommandLine;
using static System.Char;

var options = new[] { new Option<string>(new[] { "--csproj", "-c" }, "Full filepath to the .csproj generated by dotPeek containing ItemGroup references to decompiled sources.") { IsRequired = true },
                      new Option<string>(new[] { "--outputDir", "-o" }, "Path to output directory.") { IsRequired = true } }.ToDictionary(option => option.Name);

var rootCommand = new RootCommand("Process a directory of decompiled sources from dotPeek, renaming files to match class names and moving into directories matching the assembly names.") { options["csproj"], options["outputDir"] };
rootCommand.SetHandler((string csproj, string outputDir) =>
{
    var csprojObj = new Csproj(csproj);
    foreach (var file in csprojObj.CompileIncludes.Where(file => file.EndsWith(".cs")))
    {
        var csfile = new CSharpFile(file);
        var destinationDir = @$"{outputDir}\{csfile.Namespace}";
        var destinationFile = IsNumber(csfile.Name[0]) || IsNumber(csfile.Name[csfile.Name.Length - 1]) ? @$"{destinationDir}\{csfile.TopLevelIdentifiers.First().Identifier.Text}.cs" : @$"{destinationDir}\{csfile.Name}.cs";
        Console.Out.WriteLine($"Copying {csfile.Filename} to {destinationFile}.");
        if (!Directory.Exists(destinationDir))
        {
            Directory.CreateDirectory(destinationDir);
        }
        File.Copy(csfile.Filename, destinationFile, true);

    }
}, options["csproj"], options["outputDir"]);

rootCommand.Invoke(args);

